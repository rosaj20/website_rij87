<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SDS 348 Porfolio Website</title>
    <link>/</link>
    <description>Recent content on SDS 348 Porfolio Website</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Fri, 01 May 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Thank You Dr. Woodward!</title>
      <link>/blog/thank-you-dr-woodward/</link>
      <pubDate>Fri, 15 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/thank-you-dr-woodward/</guid>
      <description>I was terrified when computational statistics was the only class that fulfilled one of the last biology courses I needed to take to graduate. I was hoping to not have such a stressful semester, and with SDS 348, that seemed nearly impossible. However, the impossible turned out to be very possible. I enjoyed this class more than I thought I would. It proved to be a fun and useful tool for data interpretation.</description>
    </item>
    
    <item>
      <title>Regex - One of the Hardest Skills I Learned</title>
      <link>/blog/regex-one-of-the-hardest-skills-i-learned/</link>
      <pubDate>Sun, 10 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/regex-one-of-the-hardest-skills-i-learned/</guid>
      <description>Regular expressions (regex or regexp) extract information from text by searching for matches of a specific pattern (i.e. a sequence of ASCII or unicode characters).
Useful for parsing/replacing strings, reformatting/cleaning/stripping data, webscraping, etc.
Once you’ve learned the syntax, you can use regex in (almost) all programming languages: JavaScript, Java, VB, C #, C / C++, Python, Perl, Ruby, R, and many others!
Problem 1: Using re.findall(), match all IP addressses in this string (string2).</description>
    </item>
    
    <item>
      <title>My First Blog</title>
      <link>/blog/my-new-post/</link>
      <pubDate>Sun, 03 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/my-new-post/</guid>
      <description>Python and R can communicate with each other making it possible to share information between these two open-source programming languages.
#python code chunk fruit_prices = { &amp;#39;apple&amp;#39;: 0.65, &amp;#39;mango&amp;#39;: 1.50, &amp;#39;strawberry&amp;#39;: &amp;#39;$3/lb&amp;#39;, &amp;#39;musk melon&amp;#39;: &amp;#39;unavailable&amp;#39; } fruit_prices[&amp;#39;mango&amp;#39;] ## 1.5 #R code chunk library(reticulate) py$fruit_prices ## $apple ## [1] 0.65 ## ## $mango ## [1] 1.5 ## ## $strawberry ## [1] &amp;quot;$3/lb&amp;quot; ## ## $`musk melon` ## [1] &amp;quot;unavailable&amp;quot; x &amp;lt;- &amp;quot;dog&amp;quot; #another python code chunk r.</description>
    </item>
    
    <item>
      <title>Project 2</title>
      <link>/project2/</link>
      <pubDate>Fri, 01 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/project2/</guid>
      <description>Introduction library(tidyverse) library(sandwich) library(lmtest) library(plotROC) library(glmnet) class_diag &amp;lt;- function(probs, truth) { tab &amp;lt;- table(factor(probs &amp;gt; 0.5, levels = c(&amp;quot;FALSE&amp;quot;, &amp;quot;TRUE&amp;quot;)), truth) acc = sum(diag(tab))/sum(tab) sens = tab[2, 2]/colSums(tab)[2] spec = tab[1, 1]/colSums(tab)[1] ppv = tab[2, 2]/rowSums(tab)[2] if (is.numeric(truth) == FALSE &amp;amp; is.logical(truth) == FALSE) truth &amp;lt;- as.numeric(truth) - 1 ord &amp;lt;- order(probs, decreasing = TRUE) probs &amp;lt;- probs[ord] truth &amp;lt;- truth[ord] TPR = cumsum(truth)/max(1, sum(truth)) FPR = cumsum(!truth)/max(1, sum(!truth)) dup &amp;lt;- c(probs[-1] &amp;gt;= probs[-length(probs)], FALSE) TPR &amp;lt;- c(0, TPR[!</description>
    </item>
    
    <item>
      <title>Project 1</title>
      <link>/project1/</link>
      <pubDate>Sun, 15 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/project1/</guid>
      <description>Introduction library(tidyverse) library(dbplyr) library(ggplot2) getwd() ## [1] &amp;quot;/Users/Rosa/Website/content&amp;quot; use &amp;lt;- read.csv(file = &amp;quot;MotionUsage_P12-18.csv&amp;quot;) acc &amp;lt;- read.csv(file = &amp;quot;MotionAcceleration_P12-18.csv&amp;quot;) glimpse(use) ## Observations: 1,112 ## Variables: 8 ## $ Participant &amp;lt;fct&amp;gt; P12, P12, P12, P12, P12, P12, P12, P12, P12, P12,… ## $ Day &amp;lt;int&amp;gt; 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2… ## $ Hour.Count &amp;lt;int&amp;gt; 17, 18, 19, 20, 21, 22, 23, 24, 1, 2, 3, 4, 5, 6,… ## $ Wake.</description>
    </item>
    
    <item>
      <title>Projects</title>
      <link>/projects/</link>
      <pubDate>Sun, 02 Oct 2016 22:55:05 -0400</pubDate>
      
      <guid>/projects/</guid>
      <description>SDS 348 Projects  Project 1: Exploratory Data Analysis Project 2: Modeling, Testing, and Predicting  BDP Connecting Experience Poster  Bridging Disciplines Program Poster: Daily Activity Lab Preliminary Results: Daily Activity Lab  Read more about these preliminary results in the BDP Poster.    </description>
    </item>
    
    <item>
      <title>project</title>
      <link>/project/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/project/</guid>
      <description> SDS 348 Projects  Project 1: Exploratory Data Analysis Project 2: Modeling, Testing, and Predicting   BDP Poster   BDP Connecting Experience Poster  Bridging Disciplines Poster: Daily Activity Lab   </description>
    </item>
    
  </channel>
</rss>